/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.authpb.ChangePasswordRequest', null, global);
goog.exportSymbol('proto.authpb.ChangePasswordResponse', null, global);
goog.exportSymbol('proto.authpb.CheckServerStatusRequest', null, global);
goog.exportSymbol('proto.authpb.CheckServerStatusResponse', null, global);
goog.exportSymbol('proto.authpb.CheckUsernameRequest', null, global);
goog.exportSymbol('proto.authpb.CheckUsernameResponse', null, global);
goog.exportSymbol('proto.authpb.GetAccountDetailsRequest', null, global);
goog.exportSymbol('proto.authpb.GetAccountDetailsResponse', null, global);
goog.exportSymbol('proto.authpb.GetAllAccountsRequest', null, global);
goog.exportSymbol('proto.authpb.GetAllAccountsResponse', null, global);
goog.exportSymbol('proto.authpb.GetAllSessionDetailsRequest', null, global);
goog.exportSymbol('proto.authpb.GetAllSessionDetailsResponse', null, global);
goog.exportSymbol('proto.authpb.LoginRequest', null, global);
goog.exportSymbol('proto.authpb.LoginResponse', null, global);
goog.exportSymbol('proto.authpb.RegisterAccountRequest', null, global);
goog.exportSymbol('proto.authpb.RegisterAccountResponse', null, global);
goog.exportSymbol('proto.authpb.UpdateAccountRequest', null, global);
goog.exportSymbol('proto.authpb.UpdateAccountResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.CheckServerStatusRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.CheckServerStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.CheckServerStatusRequest.displayName = 'proto.authpb.CheckServerStatusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.CheckServerStatusRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.CheckServerStatusRequest.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.CheckServerStatusRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.CheckServerStatusRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.CheckServerStatusRequest}
 */
proto.authpb.CheckServerStatusRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.CheckServerStatusRequest;
    return proto.authpb.CheckServerStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.CheckServerStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.CheckServerStatusRequest}
 */
proto.authpb.CheckServerStatusRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.CheckServerStatusRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.CheckServerStatusRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.CheckServerStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.CheckServerStatusRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.CheckServerStatusResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.CheckServerStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.CheckServerStatusResponse.displayName = 'proto.authpb.CheckServerStatusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.CheckServerStatusResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.CheckServerStatusResponse.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.CheckServerStatusResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.CheckServerStatusResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            serverName: jspb.Message.getFieldWithDefault(msg, 1, ""),
            host: jspb.Message.getFieldWithDefault(msg, 2, ""),
            port: jspb.Message.getFieldWithDefault(msg, 3, ""),
            time: jspb.Message.getFieldWithDefault(msg, 4, ""),
            status: jspb.Message.getFieldWithDefault(msg, 5, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.CheckServerStatusResponse}
 */
proto.authpb.CheckServerStatusResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.CheckServerStatusResponse;
    return proto.authpb.CheckServerStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.CheckServerStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.CheckServerStatusResponse}
 */
proto.authpb.CheckServerStatusResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setServerName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setHost(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setPort(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setTime(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.CheckServerStatusResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.CheckServerStatusResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.CheckServerStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.CheckServerStatusResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getServerName();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getHost();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getPort();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
    f = message.getTime();
    if (f.length > 0) {
        writer.writeString(
            4,
            f
        );
    }
    f = message.getStatus();
    if (f.length > 0) {
        writer.writeString(
            5,
            f
        );
    }
};


/**
 * optional string server_name = 1;
 * @return {string}
 */
proto.authpb.CheckServerStatusResponse.prototype.getServerName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.authpb.CheckServerStatusResponse.prototype.setServerName = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string host = 2;
 * @return {string}
 */
proto.authpb.CheckServerStatusResponse.prototype.getHost = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.authpb.CheckServerStatusResponse.prototype.setHost = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string port = 3;
 * @return {string}
 */
proto.authpb.CheckServerStatusResponse.prototype.getPort = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.authpb.CheckServerStatusResponse.prototype.setPort = function (value) {
    jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string time = 4;
 * @return {string}
 */
proto.authpb.CheckServerStatusResponse.prototype.getTime = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.authpb.CheckServerStatusResponse.prototype.setTime = function (value) {
    jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string status = 5;
 * @return {string}
 */
proto.authpb.CheckServerStatusResponse.prototype.getStatus = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.authpb.CheckServerStatusResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.RegisterAccountRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.RegisterAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.RegisterAccountRequest.displayName = 'proto.authpb.RegisterAccountRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.RegisterAccountRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.RegisterAccountRequest.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.RegisterAccountRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.RegisterAccountRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            firstName: jspb.Message.getFieldWithDefault(msg, 1, ""),
            lastName: jspb.Message.getFieldWithDefault(msg, 2, ""),
            username: jspb.Message.getFieldWithDefault(msg, 3, ""),
            email: jspb.Message.getFieldWithDefault(msg, 4, ""),
            password: jspb.Message.getFieldWithDefault(msg, 5, ""),
            confirmPassword: jspb.Message.getFieldWithDefault(msg, 6, ""),
            companyTerms: jspb.Message.getFieldWithDefault(msg, 7, false),
            govtTerms: jspb.Message.getFieldWithDefault(msg, 8, false)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.RegisterAccountRequest}
 */
proto.authpb.RegisterAccountRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.RegisterAccountRequest;
    return proto.authpb.RegisterAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.RegisterAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.RegisterAccountRequest}
 */
proto.authpb.RegisterAccountRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setFirstName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setLastName(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setUsername(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setEmail(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setPassword(value);
                break;
            case 6:
                var value = /** @type {string} */ (reader.readString());
                msg.setConfirmPassword(value);
                break;
            case 7:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setCompanyTerms(value);
                break;
            case 8:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setGovtTerms(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.RegisterAccountRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.RegisterAccountRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.RegisterAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.RegisterAccountRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getFirstName();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getLastName();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getUsername();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
    f = message.getEmail();
    if (f.length > 0) {
        writer.writeString(
            4,
            f
        );
    }
    f = message.getPassword();
    if (f.length > 0) {
        writer.writeString(
            5,
            f
        );
    }
    f = message.getConfirmPassword();
    if (f.length > 0) {
        writer.writeString(
            6,
            f
        );
    }
    f = message.getCompanyTerms();
    if (f) {
        writer.writeBool(
            7,
            f
        );
    }
    f = message.getGovtTerms();
    if (f) {
        writer.writeBool(
            8,
            f
        );
    }
};


/**
 * optional string first_name = 1;
 * @return {string}
 */
proto.authpb.RegisterAccountRequest.prototype.getFirstName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.authpb.RegisterAccountRequest.prototype.setFirstName = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string last_name = 2;
 * @return {string}
 */
proto.authpb.RegisterAccountRequest.prototype.getLastName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.authpb.RegisterAccountRequest.prototype.setLastName = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.authpb.RegisterAccountRequest.prototype.getUsername = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.authpb.RegisterAccountRequest.prototype.setUsername = function (value) {
    jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string email = 4;
 * @return {string}
 */
proto.authpb.RegisterAccountRequest.prototype.getEmail = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.authpb.RegisterAccountRequest.prototype.setEmail = function (value) {
    jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string password = 5;
 * @return {string}
 */
proto.authpb.RegisterAccountRequest.prototype.getPassword = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.authpb.RegisterAccountRequest.prototype.setPassword = function (value) {
    jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string confirm_password = 6;
 * @return {string}
 */
proto.authpb.RegisterAccountRequest.prototype.getConfirmPassword = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.authpb.RegisterAccountRequest.prototype.setConfirmPassword = function (value) {
    jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool company_terms = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.authpb.RegisterAccountRequest.prototype.getCompanyTerms = function () {
    return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.authpb.RegisterAccountRequest.prototype.setCompanyTerms = function (value) {
    jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool govt_terms = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.authpb.RegisterAccountRequest.prototype.getGovtTerms = function () {
    return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.authpb.RegisterAccountRequest.prototype.setGovtTerms = function (value) {
    jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.RegisterAccountResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.RegisterAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.RegisterAccountResponse.displayName = 'proto.authpb.RegisterAccountResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.RegisterAccountResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.RegisterAccountResponse.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.RegisterAccountResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.RegisterAccountResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            result: jspb.Message.getFieldWithDefault(msg, 1, ""),
            status: jspb.Message.getFieldWithDefault(msg, 2, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.RegisterAccountResponse}
 */
proto.authpb.RegisterAccountResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.RegisterAccountResponse;
    return proto.authpb.RegisterAccountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.RegisterAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.RegisterAccountResponse}
 */
proto.authpb.RegisterAccountResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setResult(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.RegisterAccountResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.RegisterAccountResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.RegisterAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.RegisterAccountResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getResult();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getStatus();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
};


/**
 * optional string result = 1;
 * @return {string}
 */
proto.authpb.RegisterAccountResponse.prototype.getResult = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.authpb.RegisterAccountResponse.prototype.setResult = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.authpb.RegisterAccountResponse.prototype.getStatus = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.authpb.RegisterAccountResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.LoginRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.LoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.LoginRequest.displayName = 'proto.authpb.LoginRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.LoginRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.LoginRequest.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.LoginRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.LoginRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            username: jspb.Message.getFieldWithDefault(msg, 1, ""),
            password: jspb.Message.getFieldWithDefault(msg, 2, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.LoginRequest}
 */
proto.authpb.LoginRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.LoginRequest;
    return proto.authpb.LoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.LoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.LoginRequest}
 */
proto.authpb.LoginRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUsername(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPassword(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.LoginRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.LoginRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.LoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.LoginRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getUsername();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getPassword();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.authpb.LoginRequest.prototype.getUsername = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.authpb.LoginRequest.prototype.setUsername = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.authpb.LoginRequest.prototype.getPassword = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.authpb.LoginRequest.prototype.setPassword = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.LoginResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.LoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.LoginResponse.displayName = 'proto.authpb.LoginResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.LoginResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.LoginResponse.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.LoginResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.LoginResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            token: jspb.Message.getFieldWithDefault(msg, 1, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.LoginResponse}
 */
proto.authpb.LoginResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.LoginResponse;
    return proto.authpb.LoginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.LoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.LoginResponse}
 */
proto.authpb.LoginResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setToken(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.LoginResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.LoginResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.LoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.LoginResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getToken();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.authpb.LoginResponse.prototype.getToken = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.authpb.LoginResponse.prototype.setToken = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.UpdateAccountRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.UpdateAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.UpdateAccountRequest.displayName = 'proto.authpb.UpdateAccountRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.UpdateAccountRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.UpdateAccountRequest.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.UpdateAccountRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.UpdateAccountRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            firstName: jspb.Message.getFieldWithDefault(msg, 1, ""),
            lastName: jspb.Message.getFieldWithDefault(msg, 2, ""),
            username: jspb.Message.getFieldWithDefault(msg, 3, ""),
            email: jspb.Message.getFieldWithDefault(msg, 4, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.UpdateAccountRequest}
 */
proto.authpb.UpdateAccountRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.UpdateAccountRequest;
    return proto.authpb.UpdateAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.UpdateAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.UpdateAccountRequest}
 */
proto.authpb.UpdateAccountRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setFirstName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setLastName(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setUsername(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setEmail(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.UpdateAccountRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.UpdateAccountRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.UpdateAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.UpdateAccountRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getFirstName();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getLastName();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getUsername();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
    f = message.getEmail();
    if (f.length > 0) {
        writer.writeString(
            4,
            f
        );
    }
};


/**
 * optional string first_name = 1;
 * @return {string}
 */
proto.authpb.UpdateAccountRequest.prototype.getFirstName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.authpb.UpdateAccountRequest.prototype.setFirstName = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string last_name = 2;
 * @return {string}
 */
proto.authpb.UpdateAccountRequest.prototype.getLastName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.authpb.UpdateAccountRequest.prototype.setLastName = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.authpb.UpdateAccountRequest.prototype.getUsername = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.authpb.UpdateAccountRequest.prototype.setUsername = function (value) {
    jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string email = 4;
 * @return {string}
 */
proto.authpb.UpdateAccountRequest.prototype.getEmail = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.authpb.UpdateAccountRequest.prototype.setEmail = function (value) {
    jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.UpdateAccountResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.UpdateAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.UpdateAccountResponse.displayName = 'proto.authpb.UpdateAccountResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.UpdateAccountResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.UpdateAccountResponse.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.UpdateAccountResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.UpdateAccountResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            result: jspb.Message.getFieldWithDefault(msg, 1, ""),
            status: jspb.Message.getFieldWithDefault(msg, 2, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.UpdateAccountResponse}
 */
proto.authpb.UpdateAccountResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.UpdateAccountResponse;
    return proto.authpb.UpdateAccountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.UpdateAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.UpdateAccountResponse}
 */
proto.authpb.UpdateAccountResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setResult(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.UpdateAccountResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.UpdateAccountResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.UpdateAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.UpdateAccountResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getResult();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getStatus();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
};


/**
 * optional string result = 1;
 * @return {string}
 */
proto.authpb.UpdateAccountResponse.prototype.getResult = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.authpb.UpdateAccountResponse.prototype.setResult = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.authpb.UpdateAccountResponse.prototype.getStatus = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.authpb.UpdateAccountResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.GetAccountDetailsRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.GetAccountDetailsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.GetAccountDetailsRequest.displayName = 'proto.authpb.GetAccountDetailsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.GetAccountDetailsRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.GetAccountDetailsRequest.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.GetAccountDetailsRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.GetAccountDetailsRequest.toObject = function (includeInstance, msg) {
        var f, obj = {};

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.GetAccountDetailsRequest}
 */
proto.authpb.GetAccountDetailsRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.GetAccountDetailsRequest;
    return proto.authpb.GetAccountDetailsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.GetAccountDetailsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.GetAccountDetailsRequest}
 */
proto.authpb.GetAccountDetailsRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.GetAccountDetailsRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.GetAccountDetailsRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.GetAccountDetailsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.GetAccountDetailsRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.GetAccountDetailsResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.GetAccountDetailsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.GetAccountDetailsResponse.displayName = 'proto.authpb.GetAccountDetailsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.GetAccountDetailsResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.GetAccountDetailsResponse.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.GetAccountDetailsResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.GetAccountDetailsResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            firstName: jspb.Message.getFieldWithDefault(msg, 1, ""),
            lastName: jspb.Message.getFieldWithDefault(msg, 2, ""),
            username: jspb.Message.getFieldWithDefault(msg, 3, ""),
            email: jspb.Message.getFieldWithDefault(msg, 4, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.GetAccountDetailsResponse}
 */
proto.authpb.GetAccountDetailsResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.GetAccountDetailsResponse;
    return proto.authpb.GetAccountDetailsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.GetAccountDetailsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.GetAccountDetailsResponse}
 */
proto.authpb.GetAccountDetailsResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setFirstName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setLastName(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setUsername(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setEmail(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.GetAccountDetailsResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.GetAccountDetailsResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.GetAccountDetailsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.GetAccountDetailsResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getFirstName();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getLastName();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getUsername();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
    f = message.getEmail();
    if (f.length > 0) {
        writer.writeString(
            4,
            f
        );
    }
};


/**
 * optional string first_name = 1;
 * @return {string}
 */
proto.authpb.GetAccountDetailsResponse.prototype.getFirstName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.authpb.GetAccountDetailsResponse.prototype.setFirstName = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string last_name = 2;
 * @return {string}
 */
proto.authpb.GetAccountDetailsResponse.prototype.getLastName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.authpb.GetAccountDetailsResponse.prototype.setLastName = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.authpb.GetAccountDetailsResponse.prototype.getUsername = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.authpb.GetAccountDetailsResponse.prototype.setUsername = function (value) {
    jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string email = 4;
 * @return {string}
 */
proto.authpb.GetAccountDetailsResponse.prototype.getEmail = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.authpb.GetAccountDetailsResponse.prototype.setEmail = function (value) {
    jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.ChangePasswordRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.ChangePasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.ChangePasswordRequest.displayName = 'proto.authpb.ChangePasswordRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.ChangePasswordRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.ChangePasswordRequest.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.ChangePasswordRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.ChangePasswordRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            oldPassword: jspb.Message.getFieldWithDefault(msg, 1, ""),
            newPassword: jspb.Message.getFieldWithDefault(msg, 2, ""),
            confirmPassword: jspb.Message.getFieldWithDefault(msg, 3, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.ChangePasswordRequest}
 */
proto.authpb.ChangePasswordRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.ChangePasswordRequest;
    return proto.authpb.ChangePasswordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.ChangePasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.ChangePasswordRequest}
 */
proto.authpb.ChangePasswordRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setOldPassword(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setNewPassword(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setConfirmPassword(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.ChangePasswordRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.ChangePasswordRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.ChangePasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.ChangePasswordRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getOldPassword();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getNewPassword();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getConfirmPassword();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
};


/**
 * optional string old_password = 1;
 * @return {string}
 */
proto.authpb.ChangePasswordRequest.prototype.getOldPassword = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.authpb.ChangePasswordRequest.prototype.setOldPassword = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string new_password = 2;
 * @return {string}
 */
proto.authpb.ChangePasswordRequest.prototype.getNewPassword = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.authpb.ChangePasswordRequest.prototype.setNewPassword = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string confirm_password = 3;
 * @return {string}
 */
proto.authpb.ChangePasswordRequest.prototype.getConfirmPassword = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.authpb.ChangePasswordRequest.prototype.setConfirmPassword = function (value) {
    jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.ChangePasswordResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.ChangePasswordResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.ChangePasswordResponse.displayName = 'proto.authpb.ChangePasswordResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.ChangePasswordResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.ChangePasswordResponse.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.ChangePasswordResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.ChangePasswordResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            result: jspb.Message.getFieldWithDefault(msg, 1, ""),
            status: jspb.Message.getFieldWithDefault(msg, 2, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.ChangePasswordResponse}
 */
proto.authpb.ChangePasswordResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.ChangePasswordResponse;
    return proto.authpb.ChangePasswordResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.ChangePasswordResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.ChangePasswordResponse}
 */
proto.authpb.ChangePasswordResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setResult(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.ChangePasswordResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.ChangePasswordResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.ChangePasswordResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.ChangePasswordResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getResult();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getStatus();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
};


/**
 * optional string result = 1;
 * @return {string}
 */
proto.authpb.ChangePasswordResponse.prototype.getResult = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.authpb.ChangePasswordResponse.prototype.setResult = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.authpb.ChangePasswordResponse.prototype.getStatus = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.authpb.ChangePasswordResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.GetAllAccountsRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.GetAllAccountsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.GetAllAccountsRequest.displayName = 'proto.authpb.GetAllAccountsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.GetAllAccountsRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.GetAllAccountsRequest.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.GetAllAccountsRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.GetAllAccountsRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            skip: jspb.Message.getFieldWithDefault(msg, 2, 0),
            limit: jspb.Message.getFieldWithDefault(msg, 3, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.GetAllAccountsRequest}
 */
proto.authpb.GetAllAccountsRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.GetAllAccountsRequest;
    return proto.authpb.GetAllAccountsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.GetAllAccountsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.GetAllAccountsRequest}
 */
proto.authpb.GetAllAccountsRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 2:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setSkip(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setLimit(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.GetAllAccountsRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.GetAllAccountsRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.GetAllAccountsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.GetAllAccountsRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSkip();
    if (f !== 0) {
        writer.writeInt64(
            2,
            f
        );
    }
    f = message.getLimit();
    if (f !== 0) {
        writer.writeInt64(
            3,
            f
        );
    }
};


/**
 * optional int64 skip = 2;
 * @return {number}
 */
proto.authpb.GetAllAccountsRequest.prototype.getSkip = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.authpb.GetAllAccountsRequest.prototype.setSkip = function (value) {
    jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 limit = 3;
 * @return {number}
 */
proto.authpb.GetAllAccountsRequest.prototype.getLimit = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.authpb.GetAllAccountsRequest.prototype.setLimit = function (value) {
    jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.GetAllAccountsResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.GetAllAccountsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.GetAllAccountsResponse.displayName = 'proto.authpb.GetAllAccountsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.GetAllAccountsResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.GetAllAccountsResponse.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.GetAllAccountsResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.GetAllAccountsResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            ffId: jspb.Message.getFieldWithDefault(msg, 1, ""),
            firstName: jspb.Message.getFieldWithDefault(msg, 2, ""),
            lastName: jspb.Message.getFieldWithDefault(msg, 3, ""),
            email: jspb.Message.getFieldWithDefault(msg, 4, ""),
            username: jspb.Message.getFieldWithDefault(msg, 5, ""),
            createdTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
            status: jspb.Message.getFieldWithDefault(msg, 7, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.GetAllAccountsResponse}
 */
proto.authpb.GetAllAccountsResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.GetAllAccountsResponse;
    return proto.authpb.GetAllAccountsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.GetAllAccountsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.GetAllAccountsResponse}
 */
proto.authpb.GetAllAccountsResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setFfId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setFirstName(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setLastName(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setEmail(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setUsername(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setCreatedTime(value);
                break;
            case 7:
                var value = /** @type {string} */ (reader.readString());
                msg.setStatus(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.GetAllAccountsResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.GetAllAccountsResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.GetAllAccountsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.GetAllAccountsResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getFfId();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getFirstName();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getLastName();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
    f = message.getEmail();
    if (f.length > 0) {
        writer.writeString(
            4,
            f
        );
    }
    f = message.getUsername();
    if (f.length > 0) {
        writer.writeString(
            5,
            f
        );
    }
    f = message.getCreatedTime();
    if (f !== 0) {
        writer.writeInt64(
            6,
            f
        );
    }
    f = message.getStatus();
    if (f.length > 0) {
        writer.writeString(
            7,
            f
        );
    }
};


/**
 * optional string ff_id = 1;
 * @return {string}
 */
proto.authpb.GetAllAccountsResponse.prototype.getFfId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.authpb.GetAllAccountsResponse.prototype.setFfId = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string first_name = 2;
 * @return {string}
 */
proto.authpb.GetAllAccountsResponse.prototype.getFirstName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.authpb.GetAllAccountsResponse.prototype.setFirstName = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string last_name = 3;
 * @return {string}
 */
proto.authpb.GetAllAccountsResponse.prototype.getLastName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.authpb.GetAllAccountsResponse.prototype.setLastName = function (value) {
    jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string email = 4;
 * @return {string}
 */
proto.authpb.GetAllAccountsResponse.prototype.getEmail = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.authpb.GetAllAccountsResponse.prototype.setEmail = function (value) {
    jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string username = 5;
 * @return {string}
 */
proto.authpb.GetAllAccountsResponse.prototype.getUsername = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.authpb.GetAllAccountsResponse.prototype.setUsername = function (value) {
    jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 created_time = 6;
 * @return {number}
 */
proto.authpb.GetAllAccountsResponse.prototype.getCreatedTime = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.authpb.GetAllAccountsResponse.prototype.setCreatedTime = function (value) {
    jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string status = 7;
 * @return {string}
 */
proto.authpb.GetAllAccountsResponse.prototype.getStatus = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.authpb.GetAllAccountsResponse.prototype.setStatus = function (value) {
    jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.GetAllSessionDetailsRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.GetAllSessionDetailsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.GetAllSessionDetailsRequest.displayName = 'proto.authpb.GetAllSessionDetailsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.GetAllSessionDetailsRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.GetAllSessionDetailsRequest.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.GetAllSessionDetailsRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.GetAllSessionDetailsRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            ffId: jspb.Message.getFieldWithDefault(msg, 1, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.GetAllSessionDetailsRequest}
 */
proto.authpb.GetAllSessionDetailsRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.GetAllSessionDetailsRequest;
    return proto.authpb.GetAllSessionDetailsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.GetAllSessionDetailsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.GetAllSessionDetailsRequest}
 */
proto.authpb.GetAllSessionDetailsRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setFfId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.GetAllSessionDetailsRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.GetAllSessionDetailsRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.GetAllSessionDetailsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.GetAllSessionDetailsRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getFfId();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
};


/**
 * optional string ff_id = 1;
 * @return {string}
 */
proto.authpb.GetAllSessionDetailsRequest.prototype.getFfId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.authpb.GetAllSessionDetailsRequest.prototype.setFfId = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.GetAllSessionDetailsResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.GetAllSessionDetailsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.GetAllSessionDetailsResponse.displayName = 'proto.authpb.GetAllSessionDetailsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.GetAllSessionDetailsResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.GetAllSessionDetailsResponse.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.GetAllSessionDetailsResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.GetAllSessionDetailsResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            fsId: jspb.Message.getFieldWithDefault(msg, 1, ""),
            loggedIn: jspb.Message.getFieldWithDefault(msg, 2, ""),
            currentStatus: jspb.Message.getFieldWithDefault(msg, 3, ""),
            lastPing: jspb.Message.getFieldWithDefault(msg, 4, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.GetAllSessionDetailsResponse}
 */
proto.authpb.GetAllSessionDetailsResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.GetAllSessionDetailsResponse;
    return proto.authpb.GetAllSessionDetailsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.GetAllSessionDetailsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.GetAllSessionDetailsResponse}
 */
proto.authpb.GetAllSessionDetailsResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setFsId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setLoggedIn(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setCurrentStatus(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setLastPing(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.GetAllSessionDetailsResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.GetAllSessionDetailsResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.GetAllSessionDetailsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.GetAllSessionDetailsResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getFsId();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getLoggedIn();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getCurrentStatus();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
    f = message.getLastPing();
    if (f.length > 0) {
        writer.writeString(
            4,
            f
        );
    }
};


/**
 * optional string fs_id = 1;
 * @return {string}
 */
proto.authpb.GetAllSessionDetailsResponse.prototype.getFsId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.authpb.GetAllSessionDetailsResponse.prototype.setFsId = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string logged_in = 2;
 * @return {string}
 */
proto.authpb.GetAllSessionDetailsResponse.prototype.getLoggedIn = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.authpb.GetAllSessionDetailsResponse.prototype.setLoggedIn = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string current_status = 3;
 * @return {string}
 */
proto.authpb.GetAllSessionDetailsResponse.prototype.getCurrentStatus = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.authpb.GetAllSessionDetailsResponse.prototype.setCurrentStatus = function (value) {
    jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string last_ping = 4;
 * @return {string}
 */
proto.authpb.GetAllSessionDetailsResponse.prototype.getLastPing = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.authpb.GetAllSessionDetailsResponse.prototype.setLastPing = function (value) {
    jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.CheckUsernameRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.CheckUsernameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.CheckUsernameRequest.displayName = 'proto.authpb.CheckUsernameRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.CheckUsernameRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.CheckUsernameRequest.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.CheckUsernameRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.CheckUsernameRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            username: jspb.Message.getFieldWithDefault(msg, 1, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.CheckUsernameRequest}
 */
proto.authpb.CheckUsernameRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.CheckUsernameRequest;
    return proto.authpb.CheckUsernameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.CheckUsernameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.CheckUsernameRequest}
 */
proto.authpb.CheckUsernameRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUsername(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.CheckUsernameRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.CheckUsernameRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.CheckUsernameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.CheckUsernameRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getUsername();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.authpb.CheckUsernameRequest.prototype.getUsername = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.authpb.CheckUsernameRequest.prototype.setUsername = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.CheckUsernameResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.CheckUsernameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.authpb.CheckUsernameResponse.displayName = 'proto.authpb.CheckUsernameResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.authpb.CheckUsernameResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.authpb.CheckUsernameResponse.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.authpb.CheckUsernameResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.authpb.CheckUsernameResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            username: jspb.Message.getFieldWithDefault(msg, 1, ""),
            avatar: jspb.Message.getFieldWithDefault(msg, 2, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.CheckUsernameResponse}
 */
proto.authpb.CheckUsernameResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.authpb.CheckUsernameResponse;
    return proto.authpb.CheckUsernameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.CheckUsernameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.CheckUsernameResponse}
 */
proto.authpb.CheckUsernameResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUsername(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setAvatar(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.CheckUsernameResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.authpb.CheckUsernameResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.authpb.CheckUsernameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.authpb.CheckUsernameResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getUsername();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getAvatar();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.authpb.CheckUsernameResponse.prototype.getUsername = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.authpb.CheckUsernameResponse.prototype.setUsername = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string avatar = 2;
 * @return {string}
 */
proto.authpb.CheckUsernameResponse.prototype.getAvatar = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.authpb.CheckUsernameResponse.prototype.setAvatar = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.authpb);
